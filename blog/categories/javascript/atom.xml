<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | 法華経]]></title>
  <link href="http://namusyaka.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://namusyaka.github.com/"/>
  <updated>2012-10-02T17:39:13+09:00</updated>
  <id>http://namusyaka.github.com/</id>
  <author>
    <name><![CDATA[namusyaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptのHTMLCollectionに対してforEachみたいなのをしたい]]></title>
    <link href="http://namusyaka.github.com/blog/2012/10/01/github-jekyll/"/>
    <updated>2012-10-01T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/10/01/github-jekyll</id>
    <content type="html"><![CDATA[<p>HTMLCollectionにはitem, namedItemといったメソッドしか無く、for文で走査するか、タイトルのようなことをやろうと思ったら
一度配列に変換してforEach使うとかしなきゃいけないけど、forEach自体は古いブラウザでは動かない。
というわけでサラッと書いた。</p>

<p>{% codeblock lang:javascript %}
var SubHTMLCollection = function (collection) {
  this.collection = Array.apply(null, collection);
  return this;
};</p>

<p>SubHTMLCollection.prototype = {
  each : function (callback) {</p>

<pre><code>for(var i = 0, element; element = this.collection[i]; ++i)
  callback.call(this, element, i);
</code></pre>

<p>  },</p>

<p>  reverseEach : function (callback) {</p>

<pre><code>for(var i = this.collection.length - 1, element; element = this.collection[i]; --i)
  callback.call(this, element, i);
</code></pre>

<p>  }
};
{% endcodeblock %}</p>

<p>どっかで見たArray.sliceというようなクラスメソッド的な使い方、普通に出来ると思ってたんだけどChromeでこけたのでArray.prototype.slice.call使う事にしたら
Array.apply使えばいいんじゃねと指摘されて、それもそうだなということで変更した。
今回のケースは問題ないが、Array.applyを使って配列に変換する場合は変換前のオブジェクトの要素数が一つ(length等は除く)で、尚かつそれが数値である場合に正常な変換が出来ないので注意したい。</p>

<h2>移転</h2>


<p>はてなダイアリーから移転した。
hatena.xmlをoctopress用へ変換するスクリプトを汎用性のある状態で残したかったが、元々はてなダイアリーの書き方が汚かったのでかなりオレオレ仕様になってしまった。
{% gist 3769184 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[esolangインタプリタの件]]></title>
    <link href="http://namusyaka.github.com/blog/2012/07/26/github-jekyll/"/>
    <updated>2012-07-26T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/07/26/github-jekyll</id>
    <content type="html"><![CDATA[<p>流石に手を抜き過ぎだろと言われたのでそれぞれテストページを用意</p>

<p><a href="http://namusyaka.info/esolang/brainfuck.html" target="_blank">Brainf*ck Interpreter</a>
<a href="http://namusyaka.info/esolang/monamona.html" target="_blank">MONAmona Interpreter</a>
<a href="http://namusyaka.info/esolang/ook.html" target="_blank">Ook Interpreter</a></p>

<p>手を抜いてるところはかわらないんですけどね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptでBrainf*ckやOok!やMONAmonaのインタプリタを実装&SeaSlugについて]]></title>
    <link href="http://namusyaka.github.com/blog/2012/07/20/github-jekyll/"/>
    <updated>2012-07-20T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/07/20/github-jekyll</id>
    <content type="html"><![CDATA[<h2>Esolangインタプリタの話</h2>


<p>Github : <a href="https://github.com/namusyaka/sandbox/tree/master/Esolang">sandbox/Esolang</a>
テスト(Firefoxでしか動作確認していない上にフリーズの危険性があるので注意) : <a href="http://namusyaka.info/esolang/esolang.html">Esolang</a></p>

<p>何番煎じだよ感ありますが、現実逃避したくて書きました。
難解言語と呼ばれるような言語は一つインタプリタを実装してしまえば、後はちょっといじるだけで良い場合が多いので色々実装してみると面白いと思います。
とはいえ、実装に不安な点がないわけじゃないので意見等お待ちしています。
(ちなみに、実際に使う場合等は'&lt;'や'+'のような記号にいちいち関数と関連づけて実行するよりも、switch文等で分岐させたほうが絶対的に速いです)</p>

<h2>SeaSlug</h2>


<p>サイト : <a href="http://seaslug.luilak.net/">SeaSlug</a>
VimとVimScriptのWEB実装みたいなやつです。
将来的にはウェブベースの統合開発環境だったりに組み込んで使いたいなと思っています。
ところが七月中旬にはリリース予定だったのに、なかなか都合がつかなくて全然すすんでません。
時間をうまく使える様になりたいなあ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ぺージ内容を選択(しなくても可)してTwitterにつぶやくスクリプト。]]></title>
    <link href="http://namusyaka.github.com/blog/2012/04/11/github-jekyll/"/>
    <updated>2012-04-11T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/04/11/github-jekyll</id>
    <content type="html"><![CDATA[<p>一応IE,Opera,Firefox,Chrome,Safariで確認。</p>

<iframe border="0" frameborder="0" height="130" src="http://let.st-hatelabo.com/namusyaka/let.iframe?embed=1&code_id=gYC-xdP-qLWZNA" width="500"></iframe>


<p>{% codeblock lang:javascript %}</p>

<p>(function () {</p>

<p>  var d = document, w = window;</p>

<p>  function getSelectedText () {</p>

<pre><code>if('\v' === 'v')
  return d.selection.createRange().text;
else
  return ('getSelection' in w ? w : d).getSelection().toString();
</code></pre>

<p>  };</p>

<p>  var title = d.getElementsByTagName('title')[0].innerHTML
  ,   selectedText = getSelectedText()
  ,   uri = location.href
  ,   result = '';</p>

<p>  if(selectedText)</p>

<pre><code>result += '「' + selectedText + '」';
</code></pre>

<p>  if(title)</p>

<pre><code>result += title + ' | ';
</code></pre>

<p>  result += uri;</p>

<p>  w.open('http://twitter.com/home?status=' + encodeURIComponent(result));</p>

<p>  return;
})();</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptでWebページ用付箋ブックマークレット]]></title>
    <link href="http://namusyaka.github.com/blog/2012/04/09/github-jekyll/"/>
    <updated>2012-04-09T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/04/09/github-jekyll</id>
    <content type="html"><![CDATA[<p>長文を読む機会が多くなってきたのは良いけど、どこまで読んだっけ？ってことが結構あるので作ってみました。</p>

<p>実行するとpromptが表示され、scrollかsaveのどちらかを入力します(どちらにも該当しない場合には何も起こりません)。
saveを入力するとlocalStorage上に現在のスクロール量が記録されます。
scrollを入力するとlocalStorage上に記録されたスクロール量分、スクロールします。
入力する英字は小文字・大文字どちらも可。
localStorageが使えないブラウザでは動きません。</p>

<iframe border="0" frameborder="0" height="130" src="http://let.st-hatelabo.com/namusyaka/let.iframe?embed=1&code_id=gYC-ydL73uv6fA" width="500"></iframe>


<p>{% codeblock lang:javascript %}</p>

<p>(function () {</p>

<p>  var todo = window.prompt('Save or Scroll', (window.localStorage.fusen) ? 'Scroll' : 'Save');</p>

<p>  if(/save/i.test(todo))</p>

<pre><code>window.localStorage.fusen = document.documentElement.scrollTop || document.body.scrollTop;
</code></pre>

<p>  else if(/scroll/i.test(todo))</p>

<pre><code>window.scroll(0, localStorage.fusen || 0);
</code></pre>

<p>  return;
})();</p>

<p>{% endcodeblock %}</p>

<p>追記 2012/04/11</p>

<p>デフォルトの文字列を設定するようにした</p>
]]></content>
  </entry>
  
</feed>
