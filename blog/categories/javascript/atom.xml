<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | 法華経]]></title>
  <link href="http://namusyaka.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://namusyaka.github.com/"/>
  <updated>2013-01-29T23:12:51+09:00</updated>
  <id>http://namusyaka.github.com/</id>
  <author>
    <name><![CDATA[namusyaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PiggerというWebサービスをつくった男がいる]]></title>
    <link href="http://namusyaka.github.com/blog/2012/12/17/github-jekyll/"/>
    <updated>2012-12-17T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/12/17/github-jekyll</id>
    <content type="html"><![CDATA[<p>先日の記事で触れた<a href="http://www.pigger.in/">Pigger</a>を、正式にリリースした。</p>

<h2>振り返り</h2>

<p>記事もPiggerのサイトも反響があって非常に嬉しかったが、同時にこのままだと確実に失敗するだろうなということが頭の中にあった。</p>

<p>基本的に登録をしてくれる人はWeb開発者であり、メインのユーザーとなる非開発者の登録がほとんどと言っていいほど無かったのだ。</p>

<p>加えて、開発者を含めたユーザーをPiggerに停めておく(あるいは、リピーターにするような)仕組みが全く無いというのも、持続的な成長という目標を(自分の中で)掲げている上での不安要素だった。</p>

<p>そういった問題を解決すべく、<a href="http://www.pigger.in/pages/diff">いくつかの機能を追加</a>した。</p>

<h2>デザイン</h2>

<p>がらっと変わった。</p>

<p>かなりTwitterや他のサービスを意識したようなデザインになってしまった。</p>

<h2>果たしてこれで解決できるか</h2>

<p>正直なところわからない。</p>

<p>ただ、今後もPiggerは大事に作って行きたいと思っているので、ユーザーの意見や要望を積極的に取り入れて問題点を改善していくことができればいいかなと思っている。</p>

<p>大ゴケしたらそれどころじゃないけども。</p>

<h2>開発について</h2>

<p>開発メンバーは珍しく自分一人。</p>

<p>開発期間は一ヶ月半くらい。</p>

<h3>システムの実装 &amp; 運用</h3>

<p>システムは主にSinatra。</p>

<p>データベース周りではActiveRecordを使った。</p>

<p>また、Passengerを最近気に入っているので使っている。</p>

<p>UI構築は例に依ってjQuery等は使わないで書いた。</p>

<p>しかしある程度抽象化しないとそろそろきついので、シンプルなライブラリっぽいものはPiggerのために書くかもしれない。</p>

<h3>その他</h3>

<p>デザインセンスなさすぎしんどい。</p>

<p>バグありそう。</p>

<p>報告してくれたら直すので宜しくお願いします＞＜</p>

<h2>総括</h2>

<p>まず自分が必要だと思ったものを同じく必要としている人がいることが嬉しかった。</p>

<p>PiggerはそういったWeb開発者の人達も、Webサービスを利用する人達も楽しめるようなプラットフォームにしていきたい(願望)。</p>

<p>がんばります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PiggerというWebサービスをつくっている話]]></title>
    <link href="http://namusyaka.github.com/blog/2012/12/11/github-jekyll/"/>
    <updated>2012-12-11T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/12/11/github-jekyll</id>
    <content type="html"><![CDATA[<h2>全然ウケないWebサービス</h2>

<p>個人でWebサービスを作っている人ならわかるかと思うが、せっかくWebサービスを作ってもほとんど人に見られずに終わるということが往々にしてある。</p>

<p>自分が思っている原因のいくつかを以下に挙げる。</p>

<ul>
<li>Webは開発のハードルが低い。故に参入しやすい。故に競合が多い。</li>
<li>デスクトップアプリケーションはVector等で公開し、フィードバックを得られたり、広められたりするのに対し、Webサービスにはそれに相当するサービスがないっぽい。</li>
</ul>


<p>もちろん、自分の技術力や企画力など、他にも原因は考えられるが、仮に素晴らしい技術力・企画力を持っていたとしても上記のようなことが原因で上手くいかないケースがあるように思える。</p>

<p>逆に、知名度が高い人であれば、言い方は悪いが特筆すべき点もないようなサービスでも(良い悪いは抜きにして)一定の評価を得ることが出来る。出来てしまう。</p>

<p>無名開発者があまりに可哀想である(自分を含めて)。</p>

<p>そういった問題を解決するものとして、Chrome Web Storeには期待していたが今一日本では注目されていないようだし、Mozillaも何かやってたけどようわからん。</p>

<p>ツクログもイメージに近かったんだけど、盛況とは言えない状況なだけに残念。</p>

<h2>自分でオンラインマーケット的なサービスを作ってみることにした</h2>

<p>マーケットといっても名ばかりで、使用は完全に無料。</p>

<p>開発者は自分のつくったWebサービスを公開して、ユーザーのフィードバックを待ったり、他の開発者のサービスにコメントをできるようにした。</p>

<p>また、開発者は欲しいものリストを登録できるので、サービスを見たユーザーが何か贈ってくれるかもしれない。</p>

<p>ありきたりではあるが、ランキングもトップに設置してみた。</p>

<p>UUを参考に生成しているので、表示されているPVはランキングには影響しない。</p>

<p>このサービス自体、特別何かコレ！といった機能を持つわけではないんだけど、持続的に一般ユーザーにみてもらえるようになれば、無名開発者にとっては凄くありがたいなと思っている。</p>

<p>とりあえず今はベータ版という位置づけで、公式のリリース時にはデザインは大きく変更して、機能も増やす予定。</p>

<h2>開発</h2>

<p>開発については色々思うことがあるので、後日また書く。</p>

<h2>開発中だけど登録してくれるとうれしいな</h2>

<p><a href="http://www.pigger.in/">Piggerβ</a></p>

<p>バグ・脆弱性・意見・要望は<a href="http://twitter.com/namusyaka">Twitter</a>のDMで教えてくだしあ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whitespaceでヴィジュネル暗号を実装した]]></title>
    <link href="http://namusyaka.github.com/blog/2012/12/10/github-jekyll/"/>
    <updated>2012-12-10T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/12/10/github-jekyll</id>
    <content type="html"><![CDATA[<p><a href="http://ja.wikipedia.org/wiki/%E3%83%B4%E3%82%A3%E3%82%B8%E3%83%A5%E3%83%8D%E3%83%AB%E6%9A%97%E5%8F%B7">ヴィジュネル暗号</a></p>

<p><a href="http://ws2js.luilak.net/samples/vigenere.ws">Vigenere.ws</a></p>

<p>以前紹介した<a href="http://ws2js.luilak.net/interpreter.html">Whitespaceインタプリタ</a>のサンプルにも追加しておきました。</p>

<p>ちなみに、鍵を一文字に設定するとシーザー暗号と同じになり、N一文字を設定するとROT13と同じ挙動になります。</p>

<p>また、鍵は大文字小文字を区別しません。</p>

<p>起業するって意気込んでいたくせに、こいつは一体何をやっているんだという話ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WhitespaceをJavaScriptに変換するライブラリとWhitespaceインタプリタを作った]]></title>
    <link href="http://namusyaka.github.com/blog/2012/12/04/github-jekyll/"/>
    <updated>2012-12-04T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/12/04/github-jekyll</id>
    <content type="html"><![CDATA[<p><a href="http://luilak.net/">Luilak</a>で、WhitespaceをJavaScriptに変換するライブラリを作った。</p>

<p><a href="http://ws2js.luilak.net/">WS2JS</a></p>

<p><a href="http://ws2js.luilak.net/interpreter.html">Whitespace インタプリタ</a></p>

<p><a href="https://github.com/Luilak/WS2JS">Github</a></p>

<p>インタプリタにはいくつかサンプルも用意してあって、なかなか面白いかと思う。</p>

<p>一番気に入っているのはフィボナッチ。</p>

<h2>簡単な説明</h2>

<p>Usageにもあるが、WS2JS.convertにWhitespaceのコードを渡すとJavaScriptに変換されたコードの文字列が返る。</p>

<p>それをevalすることでWhitespaceを実行するという仕組み。</p>

<p>詳しい関数の説明などは<a href="http://ws2js.luilak.net/document.html">Document</a>を読んでください。</p>

<h2>ちなみに</h2>

<p>これは<a href="http://ksnctf.sweetduet.info/">某CTF</a>に触発されて作った。
これを使えば、ある問題を簡単に解けるようになるかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptのHTMLCollectionに対してforEachみたいなのをしたい]]></title>
    <link href="http://namusyaka.github.com/blog/2012/10/01/github-jekyll/"/>
    <updated>2012-10-01T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/10/01/github-jekyll</id>
    <content type="html"><![CDATA[<p>HTMLCollectionにはitem, namedItemといったメソッドしか無く、for文で走査するか、タイトルのようなことをやろうと思ったら
一度配列に変換してforEach使うとかしなきゃいけないけど、forEach自体は古いブラウザでは動かない。
というわけでサラッと書いた。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SubHTMLCollection</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">collection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">collection</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">element</span><span class="p">;</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">collection</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">SubHTMLCollection</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">each</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">element</span><span class="p">;</span> <span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">reverseEach</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">element</span><span class="p">;</span> <span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="o">--</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>どっかで見たArray.sliceというようなクラスメソッド的な使い方、普通に出来ると思ってたんだけどChromeでこけたのでArray.prototype.slice.call使う事にしたら
<del>Array.apply使えばいいんじゃねと指摘されて、それもそうだなということで変更した。
今回のケースは問題ないが、Array.applyを使って配列に変換する場合は変換前のオブジェクトの要素数が一つ(length等は除く)で、尚かつそれが数値である場合に正常な変換が出来ないので注意したい。</del>
<ins>IE8以下のブラウザではapply(およびcall)の第二引数にHTMLCollection渡すとこけたので、forでなめて配列に変換するようにした。</ins></p>

<h2>移転</h2>


<p>はてなダイアリーから移転した。
hatena.xmlをoctopress用へ変換するスクリプトを汎用性のある状態で残したかったが、元々はてなダイアリーの書き方が汚かったのでかなりオレオレ仕様になってしまった。
<div><script src='https://gist.github.com/3769184.js?file='></script>
<noscript><pre><code>require 'rexml/document'
require 'erb'

class HatenaToOctopress

  @@octo_format = &lt;&lt;-MKDN
---
layout: post
title: &lt;%= @item[:title] %&gt;
date: &lt;%= @item[:date] %&gt;
comments: true
categories: &lt;%= @item[:categories].inspect %&gt;
---
&lt;%= @item[:body] %&gt;
  MKDN

  def initialize (data)
    @data = data
  end

  def import
    doc = REXML::Document.new(@data)
    doc.elements.each(&quot;diary/day&quot;) do |day|
      @item = {}
      @item[:date] = day.attributes['date']
      day.elements.each(&quot;body&quot;) do |body|
        lines = body.text.split(/\n/)
        params = lines[1].scan(/^\*[0-9]{10}\*(?:\[(.*)\])?(.+?)$/)[0]
        @item[:categories] = params[0].split(&quot;][&quot;) if params[0]
        @item[:title] = params[1]
        @item[:body] = lines[1..-1].join(&quot;\n&quot;).gsub(/&gt;\|(.+?)\|(.+?)\|\|&lt;/m) do
          &lt;&lt;-CODE
{% codeblock lang:#{$1} %}
#{$2}
{% endcodeblock %}
          CODE
        end
        # &lt;h4&gt;を直書きしていたためoctopressに合うよう置換, 一日に複数個日記を書いていた場合の見出しも同じく置換。
        @item[:body].gsub!(/&lt;h4&gt;(.+?)&lt;\/h4&gt;|\*[0-9]{10}\*(?:\[.*\])?(.+?)\n/) { &quot;&lt;h2&gt;#{$1 || $2}&lt;/h2&gt;\n&quot; }
      end
      post ERB.new(@@octo_format).result(binding)
    end
  end

  def self.read_file (path)
    hatena2octo = self.new(File.read(path))
    hatena2octo.import
  end

  private

    def post (post_data)
      path = &quot;source/_posts/#{@item[:date]}-github-jekyll.mkd&quot;

      File.open(path, File.exist?(path) ? &quot;a&quot; : &quot;w&quot;) do |file|
        file.write(post_data)
      end
    end
end

if $0 == __FILE__
   HatenaToOctopress.read_file(&quot;hatena.xml&quot;)
end</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
