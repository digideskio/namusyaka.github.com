<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 法華経]]></title>
  <link href="http://namusyaka.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://namusyaka.github.com/"/>
  <updated>2013-11-14T23:49:22+09:00</updated>
  <id>http://namusyaka.github.com/</id>
  <author>
    <name><![CDATA[namusyaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSのためのWEBサービス「SS Note β」をリリースしました。]]></title>
    <link href="http://namusyaka.github.com/blog/2013/11/04/github-jekyll/"/>
    <updated>2013-11-04T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2013/11/04/github-jekyll</id>
    <content type="html"><![CDATA[<p><a href="http://www.ssnote.net/">SS Note β</a></p>

<p>リリースしたといっても二ヶ月以上前のことで、それからぼちぼち開発しつつ運用している。</p>

<h2>アクセス・利用者数</h2>

<p>一日大体10万PV・5万UU程度。</p>

<p>現在の登録者数は400人ちょっと。</p>

<p>未登録でもSSを読んだり書いたりといった一通りの機能は使えるのでまあこんなものかという感想。</p>

<p>利用者がいつ見てもいるというのは存外気分が良い。</p>

<p>シムシティ的な感覚と誰かが言っていたけどわかる気がする。ユーザー参加型サービスの醍醐味みたいなものなんだろうか。</p>

<h2>仕組みや使ったライブラリ等</h2>

<p><a href="http://www.padrinorb.com/">Padrino Framework</a>を採用。(余談だけど頻繁にpull reqを投げていたら、<a href="http://www.padrinorb.com/team">Padrino Core Team</a>に誘われたので参加することにした。万歳。)</p>

<p>SS Noteでは特に変わったことはしていなくて、Padrino/ActiveRecordでシステムを書いて、できるところはMemcachedとファイルでとにかくキャッシュキャッシュキャッシュ。</p>

<p>今まで食わず嫌いだったGEMをいくつか使うようにしていて、中でもCompassとFactoryGirlは便利だった。</p>

<h2>開発について</h2>

<p>ローカルではGuardを起動してガンガンテストをまわしながらテスト・コードを書く。</p>

<p>TDDとか意識してみたつもりだけど、あんまできてる感じしないな。</p>

<p>ローカルでcommitしたらテストサーバ(兼Gitlab運用サーバ)にpushして、gitlab ciでテストを回して確認。</p>

<p>問題がなければ本番サーバでgit pullしてdeployという流れ。</p>

<p>便利だな〜。</p>

<h2>今後について</h2>

<p>ちゃんと育てていきたいと思っていて、継続的に開発していく。</p>

<p>とりあえずは登録者数1000人目指そう。</p>

<p>興味ある方はnamusyaka@gmail.comまで連絡ください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[私は如何にしてPadrino::Routing及びhttp_routerのバグを直したか]]></title>
    <link href="http://namusyaka.github.com/blog/2013/08/10/github-jekyll/"/>
    <updated>2013-08-10T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2013/08/10/github-jekyll</id>
    <content type="html"><![CDATA[<p>タイトルは大げさですみません。</p>

<p>Padrino Contributorの先輩である<a href="http://twitter.com/tyabe">@tyabeさん</a>から<a href="http://tyabe.hatenablog.com/entry/2013/08/09/000000">解説の要請</a>をいただいたので、うろ覚えですが解説していきます。</p>

<p>ちなみに問題のissueは<a href="https://github.com/padrino/padrino-framework/issues/1366">broken parameter assignment in routing (11.2)</a>になります。</p>

<h2>まずは挙動確認</h2>

<p>nesquenaさんやsshawさんがこれもおかしいよ情報を書き込んでいてくれたので、そのテストコードを参考におかしくなる挙動を見つけていきます。</p>

<p>その結果、以下のことがわかります。</p>

<ul>
<li>:withオプションに限らず、正規表現を使ったキャプチャを使った場合の挙動がおかしい。</li>
<li>レスポンスのステータスコードが405になっている(許可されていないメソッド)。</li>
</ul>


<p>この二つを軸にして、実際のコードを読んでいきます。</p>

<h2>padrino-core/application/routing.rb</h2>

<p>基本的にPadrinoでは、<a href="https://github.com/padrino/padrino-framework/blob/master/padrino-core/lib/padrino-core/application/routing.rb#L643-L725">routeメソッド</a>でrouteを追加したりオプションやキャプチャをごにょごにょしているので、まずはそこを見ていきます。</p>

<p>この辺はプリントデバッグをした記憶がありますがあまり覚えてないです、すみません。</p>

<p>キャプチャ用のオプションなどはrouteメソッド内の以下の部分が肝のようでした。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;      options.delete_if do |option, args|</span>
</span><span class='line'><span class="sr">        if route.significant_variable_names.include?(option)</span>
</span><span class='line'><span class="sr">          route.add_match_with(option =&amp;gt; Array(args).first)</span>
</span><span class='line'><span class="sr">          true</span>
</span><span class='line'><span class="sr">        end</span>
</span><span class='line'><span class="sr">      end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ここでrouteに対してadd_match_withでオプションを渡しているようです。</p>

<p>routeはHttp::Routeのインスタンスなので、routing.rbはこのくらいにして次に進みます。</p>

<h2>そしてhttp_routerへ…</h2>

<p>まずはroute.add_match_withの動作を追います。</p>

<p><a href="https://github.com/joshbuddy/http_router/blob/master/lib/http_router.rb">http_router.rb</a>を探してもadd_match_withなんでメソッドはないので得意のヘルパーだろうなと思い、<a href="https://github.com/joshbuddy/http_router/blob/master/lib/http_router/route_helper.rb">route_helper.rb</a>を探すと案の定ありました。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def add_match_with(matchers)</span>
</span><span class='line'><span class="sr">  @match_with ||= {}</span>
</span><span class='line'><span class="sr">  @match_with.merge!(matchers)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>このコード自体には何の問題も無く、やっぱりマッチングがおかしいんだよね〜ということで、match_withをコード内から探していくとmatches_withというメソッドがroute.rbで見つかります。</p>

<p>今度はmatches_withを検索すると明らかにそれっぽくて読み難いコードが<a href="https://github.com/joshbuddy/http_router/blob/master/lib/http_router/node/root.rb">root.rb</a>で見つかります(add_route, add_normal_partの辺りです)。</p>

<p>ここからはしばらく、渡されたキャプチャがどういう順序を辿って行くのか調べていました(プリントデバッグなので省略します)。</p>

<p>結果、node.add_spanning_match(route.matches_with(name))に渡っていることがわかります。</p>

<p>add_spanning_matchは<code>/lib/http_router/node.rb</code>にあるようで、以下のコードになります。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def add_spanning_match(regexp, matching_indicies = [0], splitting_indicies = nil)</span>
</span><span class='line'><span class="sr">  add(SpanningRegex.new(@router, self, regexp, matching_indicies, splitting_indicies))</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ついに黒幕が正体を現しました。SpanningRegex、こいつです。</p>

<h3>lib/http_router/node/spanning_regex.rbへ</h3>

<p>ここまで辿り着けば簡単な気もしますが(params_countのコードが明らかにおかしいので)、おかしい部分には全く気づかずにちらっと見て諦めました。</p>

<p>あまりに意味不明なので、http_routerが内部で生成してくれたありがたいソースコードをprintしてどのように遷移していくのか見て行くことにしました。</p>

<p>以下のようなコードをpadrino-core/application/routing.rbに書きます(実はデバッグ時のコードは消しちゃって残ってないので再現になります…)。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Node</span><span class="o">::</span><span class="no">Root</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def compile(routes)</span>
</span><span class='line'><span class="sr">  routes.each {|route| add_route(route)}</span>
</span><span class='line'><span class="sr">  root.extend(root.methods_module)</span>
</span><span class='line'><span class="sr">  _code = to_code</span>
</span><span class='line'><span class="sr">  puts _code</span>
</span><span class='line'><span class="sr">  instance_eval &quot;def call(request, &amp;amp;callback)\n</span><span class="si">#{</span><span class="n">_code</span><span class="si">}</span><span class="sr">\nnil\nend&quot;</span>
</span><span class='line'><span class="sr">  @compiled = true</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>余談ですが、http_routerではrouteを追加するごとに、<code>to_code</code>で生成されるコードが増えていきます。地獄です。</p>

<h3>to_codeで生成されるコードを読む</h3>

<p>適当に作ったpadrino-appのapp/app.rbを以下のようにして、padrino sでデバッグ開始です(mock_appとか使ってテストした方が早かったと今になって思う)。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Sandbox</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">App</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Padrino</span><span class="o">::</span><span class="no">Application</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;register Padrino::Rendering</span>
</span><span class='line'><span class="sr">register Padrino::Helpers</span>
</span><span class='line'>
</span><span class='line'><span class="sr">post :index, :with =&amp;gt; [:foo, :bar], :bar =&amp;gt; /</span><span class="o">.</span><span class="n">+</span><span class="o">/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">:map</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;/mystuff/:a_id/boing/:boing_id&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>適当に<code>/</code>などにアクセスすると以下のような出力が得られます(実際の出力は見難かったので少し整形しています)。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;HttpRouter::Node::Variable&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">unless</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">params</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>  <span class="c1"># HttpRouter::Node::SpanningRegex</span>
</span><span class='line'>  <span class="n">whole_path1</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">joined_path</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">match</span> <span class="o">=</span> <span class="sr">/.+/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">whole_path1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">match</span><span class="o">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">zero?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;_whole_path1 = request.path.dup</span>
</span><span class='line'><span class="sr">request.params &amp;lt;&amp;lt; match[0]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">remaining_path = whole_path1[match[0].size + (whole_path1[match[0].size] == ?/</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="p">),</span> <span class="n">whole_path1</span><span class="o">.</span><span class="n">size</span><span class="o">]</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">remaining_path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># HttpRouter::Node::RequestMethod</span>
</span><span class='line'><span class="k">if</span> <span class="s2">&quot;POST&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>  <span class="k">if</span> <span class="s2">&quot;POST&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>    <span class="c1"># HttpRouter::Node::Path</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>      <span class="kp">catch</span><span class="p">(</span><span class="ss">:pass</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">callback</span>
</span><span class='line'>          <span class="n">request</span><span class="o">.</span><span class="n">called</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>          <span class="n">callback</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="no">Response</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="vi">@ivar_2</span><span class="p">))</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">env</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">env</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.request&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">].</span><span class="n">merge!</span><span class="p">(</span><span class="no">Hash</span><span class="o">[[</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="p">)</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@router</span><span class="o">.</span><span class="n">rewrite_path_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>          <span class="n">response</span> <span class="o">=</span> <span class="vi">@router</span><span class="o">.</span><span class="n">process_destination_path</span><span class="p">(</span><span class="vi">@ivar_2</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">response</span> <span class="k">unless</span> <span class="n">router</span><span class="o">.</span><span class="n">pass_on_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">acceptable_methods</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;POST&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">_whole_path1</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  request.path.unshift request.params.pop</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">HttpRouter</span><span class="o">::</span><span class="no">Node</span><span class="o">::</span><span class="no">Lookup</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;unless request.path_finished?</span>
</span><span class='line'><span class="sr">  part3 = request.path.shift</span>
</span><span class='line'><span class="sr">  case part3</span>
</span><span class='line'><span class="sr">  when &quot;mystuff&quot;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">unless</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">params</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>  <span class="c1"># HttpRouter::Node::Lookup</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>    <span class="n">part4</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">part4</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;boing&quot;</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">params</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>        <span class="c1"># HttpRouter::Node::RequestMethod</span>
</span><span class='line'>        <span class="k">if</span> <span class="s2">&quot;GET&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>          <span class="k">if</span> <span class="s2">&quot;GET&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>          <span class="c1"># HttpRouter::Node::Path</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>              <span class="kp">catch</span><span class="p">(</span><span class="ss">:pass</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">callback</span>
</span><span class='line'>                  <span class="n">request</span><span class="o">.</span><span class="n">called</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>                  <span class="n">callback</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="no">Response</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="vi">@ivar_5</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                  <span class="n">env</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">env</span>
</span><span class='line'>                  <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.request&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span>
</span><span class='line'>                  <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>                  <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">].</span><span class="n">merge!</span><span class="p">(</span><span class="no">Hash</span><span class="o">[[</span><span class="ss">:a_id</span><span class="p">,</span> <span class="ss">:boing_id</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="p">)</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>                  <span class="vi">@router</span><span class="o">.</span><span class="n">rewrite_path_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">response</span> <span class="o">=</span> <span class="vi">@router</span><span class="o">.</span><span class="n">process_destination_path</span><span class="p">(</span><span class="vi">@ivar_5</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">return</span> <span class="n">response</span> <span class="k">unless</span> <span class="n">router</span><span class="o">.</span><span class="n">pass_on_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">acceptable_methods</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;GET&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># HttpRouter::Node::RequestMethod</span>
</span><span class='line'>        <span class="k">if</span> <span class="s2">&quot;HEAD&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>          <span class="k">if</span> <span class="s2">&quot;HEAD&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>          <span class="c1"># HttpRouter::Node::Path</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>              <span class="kp">catch</span><span class="p">(</span><span class="ss">:pass</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">callback</span>
</span><span class='line'>                  <span class="n">request</span><span class="o">.</span><span class="n">called</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>                  <span class="n">callback</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="no">Response</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="vi">@ivar_6</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                  <span class="n">env</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">env</span>
</span><span class='line'>                  <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.request&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span>
</span><span class='line'>                  <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>                  <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">].</span><span class="n">merge!</span><span class="p">(</span><span class="no">Hash</span><span class="o">[[</span><span class="ss">:a_id</span><span class="p">,</span> <span class="ss">:boing_id</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="p">)</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>                  <span class="vi">@router</span><span class="o">.</span><span class="n">rewrite_path_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">response</span> <span class="o">=</span> <span class="vi">@router</span><span class="o">.</span><span class="n">process_destination_path</span><span class="p">(</span><span class="vi">@ivar_6</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">return</span> <span class="n">response</span> <span class="k">unless</span> <span class="n">router</span><span class="o">.</span><span class="n">pass_on_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">acceptable_methods</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;HEAD&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">unshift</span> <span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>      <span class="k">end</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">unshift</span> <span class="n">part4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">unshift</span> <span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">unshift</span> <span class="n">part3</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;HttpRouter::Node::Glob&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">request</span><span class="o">.</span><span class="n">params</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="n">globbed_params7</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'><span class="k">until</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="n">globbed_params7</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>  <span class="c1"># HttpRouter::Node::Regex</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">match</span> <span class="o">=</span> <span class="sr">/([&lt;sup&gt;\/]*?).png$/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/sup&gt; and match.begin(0).zero?&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">part</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">params</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">match</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="c1"># HttpRouter::Node::RequestMethod</span>
</span><span class='line'><span class="k">if</span> <span class="s2">&quot;GET&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>  <span class="k">if</span> <span class="s2">&quot;GET&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>    <span class="c1"># HttpRouter::Node::Path</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>      <span class="kp">catch</span><span class="p">(</span><span class="ss">:pass</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">callback</span>
</span><span class='line'>          <span class="n">request</span><span class="o">.</span><span class="n">called</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>          <span class="n">callback</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="no">Response</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="vi">@ivar_8</span><span class="p">))</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">env</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">env</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.request&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">].</span><span class="n">merge!</span><span class="p">(</span><span class="no">Hash</span><span class="o">[[</span><span class="ss">:__sinatra__</span><span class="p">,</span> <span class="ss">:image</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="p">)</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@router</span><span class="o">.</span><span class="n">rewrite_path_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>          <span class="n">response</span> <span class="o">=</span> <span class="vi">@router</span><span class="o">.</span><span class="n">process_destination_path</span><span class="p">(</span><span class="vi">@ivar_8</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">response</span> <span class="k">unless</span> <span class="n">router</span><span class="o">.</span><span class="n">pass_on_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">acceptable_methods</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;GET&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1"># HttpRouter::Node::RequestMethod</span>
</span><span class='line'><span class="k">if</span> <span class="s2">&quot;HEAD&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>  <span class="k">if</span> <span class="s2">&quot;HEAD&quot;</span> <span class="o">===</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">request_method</span>
</span><span class='line'>    <span class="c1"># HttpRouter::Node::Path</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">path_finished?</span>
</span><span class='line'>      <span class="kp">catch</span><span class="p">(</span><span class="ss">:pass</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">callback</span>
</span><span class='line'>          <span class="n">request</span><span class="o">.</span><span class="n">called</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>          <span class="n">callback</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="no">Response</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="vi">@ivar_9</span><span class="p">))</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">env</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">rack_request</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">env</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.request&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>          <span class="n">env</span><span class="o">[</span><span class="s1">&#39;router.params&#39;</span><span class="o">].</span><span class="n">merge!</span><span class="p">(</span><span class="no">Hash</span><span class="o">[[</span><span class="ss">:__sinatra__</span><span class="p">,</span> <span class="ss">:image</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="p">)</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@router</span><span class="o">.</span><span class="n">rewrite_path_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>          <span class="n">response</span> <span class="o">=</span> <span class="vi">@router</span><span class="o">.</span><span class="n">process_destination_path</span><span class="p">(</span><span class="vi">@ivar_9</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">response</span> <span class="k">unless</span> <span class="n">router</span><span class="o">.</span><span class="n">pass_on_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">acceptable_methods</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;HEAD&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">unshift</span> <span class="n">part</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">globbed_params7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>凄まじいですね！</p>

<p>これをcallメソッドとしてinstance_evalで定義して、リクエスト毎に毎回このコードが実行されているんだからかなりヤバいです。</p>

<p>このコードを読む前提として、以下のものを挙げておきます。</p>

<ul>
<li>requestはHttpRouter::Request。Rack::Requestをごにょごにょするクラスです。</li>
<li>request.pathは原則的に、パスを<code>/</code>でsplitした配列を返します。</li>
<li>request.joined_pathはrequest.pathを<code>/</code>でjoinした結果である文字列を返します。</li>
<li>request.paramsは後に、ブロック内で参照できるparamsの元となるものです。詳しくは上のコードとあわせて<code>padrino-core/application/routing.rb</code>にあるprocess_destination_pathメソッド付近を読むとわかります。</li>
<li>request.rack_request.request_methodは動作に問題なく、<code>/mystuff/5/boing/2</code>にGETでリクエストを飛ばすとGETが格納されています。</li>
<li>生成されるコードでは、条件に入る前にrequest.paramsを追加し、条件に当てはまらなかった場合にはrequest.pathやrequest.paramsの値を操作して、帳尻を合わせるということをしています。</li>
<li>どう考えてもおかしい<code>match = /.+/.match(whole_path1)</code>がありますが、今回の問題の本質ではないので飛ばします(新たなバグの原因なのでそのうち時間があれば直そうと思っています)。</li>
</ul>


<p>今回問題なのは、<code>/mystuff/5/boing/2</code>にリクエストを飛ばしたときに405を返すというところで、本来であれば46行目の<code>case part3</code>から始まる部分にマッチすべきリクエストのはずです。</p>

<p>part3の中身がおかしいことは明らかなので、以下のモンキーパッチをrouting.rbに書いて、中身を調べます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Node</span><span class="o">::</span><span class="no">Lookup</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def to_code</span>
</span><span class='line'><span class="sr">  part_name = &quot;part</span><span class="si">#{</span><span class="n">root</span><span class="o">.</span><span class="n">next_counter</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">  &quot;unless request.path_finished?</span>
</span><span class='line'><span class="sr">    </span><span class="si">#{</span><span class="n">part_name</span><span class="si">}</span><span class="sr"> = request.path.shift</span>
</span><span class='line'><span class="sr">    p &#39;</span><span class="si">#{</span><span class="n">part_name</span><span class="si">}</span><span class="sr"> is &#39; + </span><span class="si">#{</span><span class="n">part_name</span><span class="si">}</span><span class="sr"> # この部分を追加</span>
</span><span class='line'><span class="sr">    case </span><span class="si">#{</span><span class="n">part_name</span><span class="si">}</span><span class="sr"></span>
</span><span class='line'><span class="sr">    </span><span class="si">#{</span><span class="vi">@map</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="s2">&quot;when </span><span class="si">#{</span><span class="n">k</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">; </span><span class="si">#{</span><span class="n">v</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:to_code</span><span class="p">)</span> <span class="o">*</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="si">}</span><span class="s2">;&quot;</span><span class="si">}</span><span class="sr"> * &quot;\n&quot;}</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">    request.path.unshift </span><span class="si">#{</span><span class="n">part_name</span><span class="si">}</span><span class="sr"></span>
</span><span class='line'><span class="sr">  end&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>すると中身が判明し、<code>"part3 is 5/boing/2"</code>と出ます(本当は中身がおかしいにしても5が出力されるべきなんですが、前述したどう考えてもおかしい部分のせいでこうなっています)。</p>

<p>ここまで来ると、前提として挙げた帳尻合わせが上手くいっていないことがわかるので、その部分を重点的に見ていきます。</p>

<p>もう気づいている人も多いかと思いますが、生成されたコードの37行目に<code>request.params.slice!(-8, 1)</code>とあります。</p>

<p>ここで本来削除されるべきparamを削除できていないんだろうと思い、実際にこの部分を生成しているSpanningRegexを再度調べます。</p>

<p>以下のコードです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HttpRouter</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;class SpanningRegex &amp;lt; Regex</span>
</span><span class='line'><span class="sr">  def to_code</span>
</span><span class='line'><span class="sr">    params_count = @ordered_indicies.size</span>
</span><span class='line'><span class="sr">    whole_path_var = &quot;whole_path</span><span class="si">#{</span><span class="n">root</span><span class="o">.</span><span class="n">next_counter</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">    &quot;</span><span class="si">#{</span><span class="n">whole_path_var</span><span class="si">}</span><span class="sr"> = request.joined_path</span>
</span><span class='line'><span class="sr">    if match = </span><span class="si">#{</span><span class="vi">@matcher</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="sr">.match(</span><span class="si">#{</span><span class="n">whole_path_var</span><span class="si">}</span><span class="sr">) and match.begin(0).zero?</span>
</span><span class='line'><span class="sr">      _</span><span class="si">#{</span><span class="n">whole_path_var</span><span class="si">}</span><span class="sr"> = request.path.dup</span>
</span><span class='line'><span class="sr">      &quot; &amp;lt;&amp;lt; param_capturing_code &amp;lt;&amp;lt; &quot;</span>
</span><span class='line'><span class="sr">      remaining_path = </span><span class="si">#{</span><span class="n">whole_path_var</span><span class="si">}</span><span class="sr">[match[0].size + (</span><span class="si">#{</span><span class="n">whole_path_var</span><span class="si">}</span><span class="sr">[match[0].size] == ?/</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="p">),</span> <span class="c1">#{whole_path_var}.size]</span>
</span><span class='line'>      <span class="n">request</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">remaining_path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#{node_to_code}</span>
</span><span class='line'>      <span class="n">request</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">_</span><span class="c1">#{whole_path_var}</span>
</span><span class='line'>      <span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="c1">#{-params_count.size}, #{params_count})</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  end</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>params_count.size</code>は明らかにおかしい(Fixnum#sizeをこの場面で使うことはないだろうと思った)ので、.size部分を消したものをモンキーパッチとして、routing.rbに追加してやるとしっかり帳尻が合い、</p>

<p>issueで取り上げられていたテストも無事動きました。</p>

<p>後は、今回の変更で以前まで動いていたコードが動かなくなっていないかをテストして、<a href="https://github.com/padrino/padrino-framework/pull/1378">pull req</a>を飛ばしました。</p>

<p>以上が、今回の大まかな顛末となります。</p>

<p>実際にはこれに辿り着いた後も、明らかにおかしい部分(前述)もまとめて上手く直す方法ないかな〜と模索していましたが途中で嫌になったのでやめてしまいました。</p>

<h2>総括</h2>

<ul>
<li>priorityを直したときにhttp_routerのコードをある程度読んでいたのでそれが良かったと思います。</li>
<li>priorityを直したときと違って、明らかに今回は開発者の人が動かそうとしているのがわかったので、少ない変更で解決できて安心しています。</li>
<li>コード生成部分、ヤバいと思うと同時にすごいなーとも思いました。かなり勉強になりました。</li>
<li>そもそも、SpanningRegexに辿り着いた時点で気づくべきミス(少なくとも違和感を感じるべき)だったのでまだまだ実力が足りないなと実感しました。</li>
</ul>


<p>最後になりますが、Padrinoは現在http_routerに依存していますが、今後のアップデートで(多分1.0かな？)http_routerを削除して、新たにroutingを書き換える予定になっています。</p>

<p>http_routerは確かにアレですが、Padrinoのことは嫌いにならずに使っていきましょう！</p>

<p>自分も少しでもPadrinoに協力できるようにがんばります！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2ch SSのまとめのまとめ?アンテナ?を作った]]></title>
    <link href="http://namusyaka.github.com/blog/2013/01/29/github-jekyll/"/>
    <updated>2013-01-29T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2013/01/29/github-jekyll</id>
    <content type="html"><![CDATA[<p>2ch SS、意外と暇つぶしになって素晴らしいがブログ毎に読むのは面倒だし、何より興味のないSSは全く読みたく無い。</p>

<p>既存のアンテナにカテゴライズもしてくれるモノがあったりするんだけど、スマホ対応されてなかったり、カテゴライズ自体が微妙だったりっていう理由でなかなか自分好みのものがなかった。</p>

<h2>だから作った</h2>

<p>「<a href="http://ss.namusyaka.info/" target="_blank">SSのまとめ(- -;*) | 2ch SSのまとめのまとめ</a>」</p>

<h2>つくってみた感想</h2>

<p>2chアンテナは乱立するのに対してSSまとめアンテナがなかなか出来ない理由がわかった。</p>

<p>カテゴライズがなかなかに面倒だ。</p>

<p>ブログごとに設定されたカテゴリを参考にカテゴライズしようかとも思ったけど、カテゴリの設定の仕方が意外とバラバラで、結局は登場人物から作品を割り出してカテゴライズすることにした。</p>

<p>今後も試行錯誤しながら徐々に精度はあげていきたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PiggerというWebサービスをつくった男がいる]]></title>
    <link href="http://namusyaka.github.com/blog/2012/12/17/github-jekyll/"/>
    <updated>2012-12-17T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/12/17/github-jekyll</id>
    <content type="html"><![CDATA[<p>先日の記事で触れた<a href="http://www.pigger.in/">Pigger</a>を、正式にリリースした。</p>

<h2>振り返り</h2>

<p>記事もPiggerのサイトも反響があって非常に嬉しかったが、同時にこのままだと確実に失敗するだろうなということが頭の中にあった。</p>

<p>基本的に登録をしてくれる人はWeb開発者であり、メインのユーザーとなる非開発者の登録がほとんどと言っていいほど無かったのだ。</p>

<p>加えて、開発者を含めたユーザーをPiggerに停めておく(あるいは、リピーターにするような)仕組みが全く無いというのも、持続的な成長という目標を(自分の中で)掲げている上での不安要素だった。</p>

<p>そういった問題を解決すべく、<a href="http://www.pigger.in/pages/diff">いくつかの機能を追加</a>した。</p>

<h2>デザイン</h2>

<p>がらっと変わった。</p>

<p>かなりTwitterや他のサービスを意識したようなデザインになってしまった。</p>

<h2>果たしてこれで解決できるか</h2>

<p>正直なところわからない。</p>

<p>ただ、今後もPiggerは大事に作って行きたいと思っているので、ユーザーの意見や要望を積極的に取り入れて問題点を改善していくことができればいいかなと思っている。</p>

<p>大ゴケしたらそれどころじゃないけども。</p>

<h2>開発について</h2>

<p>開発メンバーは珍しく自分一人。</p>

<p>開発期間は一ヶ月半くらい。</p>

<h3>システムの実装 &amp; 運用</h3>

<p>システムは主にSinatra。</p>

<p>データベース周りではActiveRecordを使った。</p>

<p>また、Passengerを最近気に入っているので使っている。</p>

<p>UI構築は例に依ってjQuery等は使わないで書いた。</p>

<p>しかしある程度抽象化しないとそろそろきついので、シンプルなライブラリっぽいものはPiggerのために書くかもしれない。</p>

<h3>その他</h3>

<p>デザインセンスなさすぎしんどい。</p>

<p>バグありそう。</p>

<p>報告してくれたら直すので宜しくお願いします＞＜</p>

<h2>総括</h2>

<p>まず自分が必要だと思ったものを同じく必要としている人がいることが嬉しかった。</p>

<p>PiggerはそういったWeb開発者の人達も、Webサービスを利用する人達も楽しめるようなプラットフォームにしていきたい(願望)。</p>

<p>がんばります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PiggerというWebサービスをつくっている話]]></title>
    <link href="http://namusyaka.github.com/blog/2012/12/11/github-jekyll/"/>
    <updated>2012-12-11T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2012/12/11/github-jekyll</id>
    <content type="html"><![CDATA[<h2>全然ウケないWebサービス</h2>

<p>個人でWebサービスを作っている人ならわかるかと思うが、せっかくWebサービスを作ってもほとんど人に見られずに終わるということが往々にしてある。</p>

<p>自分が思っている原因のいくつかを以下に挙げる。</p>

<ul>
<li>Webは開発のハードルが低い。故に参入しやすい。故に競合が多い。</li>
<li>デスクトップアプリケーションはVector等で公開し、フィードバックを得られたり、広められたりするのに対し、Webサービスにはそれに相当するサービスがないっぽい。</li>
</ul>


<p>もちろん、自分の技術力や企画力など、他にも原因は考えられるが、仮に素晴らしい技術力・企画力を持っていたとしても上記のようなことが原因で上手くいかないケースがあるように思える。</p>

<p>逆に、知名度が高い人であれば、言い方は悪いが特筆すべき点もないようなサービスでも(良い悪いは抜きにして)一定の評価を得ることが出来る。出来てしまう。</p>

<p>無名開発者があまりに可哀想である(自分を含めて)。</p>

<p>そういった問題を解決するものとして、Chrome Web Storeには期待していたが今一日本では注目されていないようだし、Mozillaも何かやってたけどようわからん。</p>

<p>ツクログもイメージに近かったんだけど、盛況とは言えない状況なだけに残念。</p>

<h2>自分でオンラインマーケット的なサービスを作ってみることにした</h2>

<p>マーケットといっても名ばかりで、使用は完全に無料。</p>

<p>開発者は自分のつくったWebサービスを公開して、ユーザーのフィードバックを待ったり、他の開発者のサービスにコメントをできるようにした。</p>

<p>また、開発者は欲しいものリストを登録できるので、サービスを見たユーザーが何か贈ってくれるかもしれない。</p>

<p>ありきたりではあるが、ランキングもトップに設置してみた。</p>

<p>UUを参考に生成しているので、表示されているPVはランキングには影響しない。</p>

<p>このサービス自体、特別何かコレ！といった機能を持つわけではないんだけど、持続的に一般ユーザーにみてもらえるようになれば、無名開発者にとっては凄くありがたいなと思っている。</p>

<p>とりあえず今はベータ版という位置づけで、公式のリリース時にはデザインは大きく変更して、機能も増やす予定。</p>

<h2>開発</h2>

<p>開発については色々思うことがあるので、後日また書く。</p>

<h2>開発中だけど登録してくれるとうれしいな</h2>

<p><a href="http://www.pigger.in/">Piggerβ</a></p>

<p>バグ・脆弱性・意見・要望は<a href="http://twitter.com/namusyaka">Twitter</a>のDMで教えてくだしあ</p>
]]></content>
  </entry>
  
</feed>
