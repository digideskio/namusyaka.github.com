<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: (X)HTML | 法華経]]></title>
  <link href="http://namusyaka.github.com/blog/categories/-x-html/atom.xml" rel="self"/>
  <link href="http://namusyaka.github.com/"/>
  <updated>2012-12-31T19:31:51+09:00</updated>
  <id>http://namusyaka.github.com/</id>
  <author>
    <name><![CDATA[namusyaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML4.01における開始タグ・終了タグの省略について]]></title>
    <link href="http://namusyaka.github.com/blog/2011/12/29/github-jekyll/"/>
    <updated>2011-12-29T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2011/12/29/github-jekyll</id>
    <content type="html"><![CDATA[<p>以前Twitterで少しつぶやきましたが、マジかよと思った事があったので紹介します。</p>

<h2>HTMLのおはなし</h2>


<blockquote><p>http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/intro/sgmltut.html#h-3.2.1>
HTML要素型の中には、著者が終了タグを省略することを許容するものもある。(例えば、P要素型やLI要素型)。さらに一部の要素型は、開始タグの省略も許容する。例えば、 HEADや BODYがこれである。
&lt;&lt;</p></blockquote>

<p>HTML4.01ではbody要素, head要素は省略可能です。
他にもhtml要素が省略できますし、終了タグの省略が可能な要素もあります。</p>

<blockquote><p>http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/intro/sgmltut.html#h-3.3.3>
要素のタグが省略可能であるかどうか。要素名の次に2つのハイフンが現れていれば、これは開始タグも終了タグも共に必須であることを意味する。1つのハイフンの後に大文字Oがあるという組み合わせの場合、終了タグが省略可能であることを意味する。大文字Oが2つだった場合、開始タグと終了タグの両方が省略可能である。
&lt;&lt;</p></blockquote>

<p>例
{% codeblock lang:dtd %}</p>

<p>&lt;!ELEMENT P - O (%inline;)*            -- paragraph --></p>

<!-- Pという要素名の後ろに - Oという文字列があります。これは終了タグが省略できることを意味します。空要素も同じ書き方をされます。 -->


<p>&lt;!ELEMENT BR - O EMPTY                 -- forced line break --></p>

<p>&lt;!ELEMENT BODY O O (%block;|SCRIPT)+ +(INS|DEL) -- document body --></p>

<!-- これは開始タグ、終了タグを両方省略できるということを意味します。 -->


<p>{% endcodeblock %}</p>

<p>よって、以下のようなHTMLはW3C的にはValidです。</p>

<p>{% codeblock lang:html %}</p>

<p>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>test</title></p>

<h1>test</h1>


<p>柴咲コウだいすき

{% endcodeblock %}


<h2>しかし</h2>

OpenSUSE12.1環境で用いられるブラウザではこのHTMLのパースにこけるようです(具体的には、cssが正しく反映されない、javascriptでこける)。
要因としてはhtml要素,body要素,head要素が省略されていることにあったようですが、詳しいことは調べてないのでわかりません(もしかしたら、他にもあるかもしれません。誰か調べたら教えてください)。
一つ言えるのは、<strong>これらの要素は省略できるけどしないほうが良い</strong>ってことですね。
終了タグの省略は問題ないようです。

この事実で大打撃をうけた僕でした。

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptでObjectとArrayをパースしてHTML(Document Object)に変換する]]></title>
    <link href="http://namusyaka.github.com/blog/2011/02/27/github-jekyll/"/>
    <updated>2011-02-27T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2011/02/27/github-jekyll</id>
    <content type="html"><![CDATA[<p>jsonとか配列って結構入り組んだ形になりやすくて、構造を確認するのが結構めんどくさかったりします。
しかしHTMLに変換すると結構見やすいです。
というわけで、オブジェクトを定義リスト、配列をリストに変換する関数を作ってみました。</p>

<script src="https://gist.github.com/869512.js"> </script>


<p><noscript>
{% codeblock lang:javascript %}</p>

<p>function parseObject(obj) {
  var <em>d = document, create = function(element) {return </em>d.createElement(element)}
  switch(obj.constructor) {</p>

<pre><code>case Array:
  var list = create('ul');
  break
case Object:
  var list = create('dl');
  break
default:
  return _d.createTextNode(obj)
</code></pre>

<p>  }
  switch(list.tagName) {</p>

<pre><code>case 'UL':
  for(var i in obj) {
    if(obj[i] instanceof Object)
      list.appendChild(create('li')).appendChild(arguments.callee(obj[i]))
    else
      list.appendChild(create('li')).innerHTML = obj[i];
  }
  break
case 'DL':
  for(var i in obj) {
    list.appendChild(create('dt')).innerHTML = i;
    if(obj[i] instanceof Object)
      list.appendChild(create('dd')).appendChild(arguments.callee(obj[i]));
    else
      list.appendChild(create('dd')).innerHTML =obj[i]
  }
  break
</code></pre>

<p>  }
  return list
}</p>

<p>{% endcodeblock %}</p>

<p></noscript>
CSSも活用するとかなり見やすくなるかと思います。
何かおかしい点があったら言ってください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTMLについて]]></title>
    <link href="http://namusyaka.github.com/blog/2010/08/19/github-jekyll/"/>
    <updated>2010-08-19T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2010/08/19/github-jekyll</id>
    <content type="html"><![CDATA[<h2>最近</h2>


<p>よく目にするのが、表示されるんだからHTMLは適当でいいじゃんｗｗｗ
とか
HTMLとか簡単じゃね？出来ない奴いんの？ｗｗｗ
というような書き込み・発言です。</p>

<p>まーあながち後者の言ってることは間違いじゃないんですが、そう言う人に限って理解できていないことが多いです。
というか僕と出会って、そういうようなことを言った人の中には残念ながら理解できている人がいませんでした。</p>

<p>おまけに、本来は素人の手本になるべきはずの企業のサイトや、WEB開発を売りにしている企業のサイトでさえ、HTMLの文法が守れていないところがかなり多いわけです。(テーブルレイアウト三昧だったり。レイアウトが崩れていたり。)</p>

<p>今更僕が異論を唱えたところでどうなるって話でもないんですが、このブログをみてくれている人には僕がHTMLを書く際気をつけることや、考え方について知ってもらいたいので書こうと思います。</p>

<h2>まず気をつけていること</h2>




<h5>HTMLでデザインはせずに、CSSにデザインを一任するということ</h5>


<p>これを守ることでHTML自身の負担が減ります。
table要素を使って頑張ってレイアウトしたりだとか、面倒なことはしなくていいわけです。
そもそもHTMLでデザインしちゃったらCSSの存在意義が無いので。
何かモノを作る企業ってのは大抵、作業も役割分担をしていると思うんですが、WEBサイトを作るときに言語の役割を考えられていないのは、ぶっちゃけなぞいです。
その人その人の適性を見極めて役割分担するより、その言語にもともとある役割をそのまま利用するだけって方が簡単だと思うんですが。</p>

<h5>HTMLは最低限validであること</h5>


<p>C言語で文法エラーを起こすとプログラムは動作しません。
他のプログラミング言語も然りです。
しかしながらHTMLは適当な文を書いてもある程度は表示できてしまいます。
ですが、そうして表示されたページのレイアウトは、あなたが作ったものではなく、ブラウザの補正があってようやく表示されてるものです。
言いたいことは、そういったページをいくら作ってもあなたがHTMLを書いたことにはならないのでどんまいってことです。
あ、でもgoogleのように文法を守ってなくても全ブラウザ(IE6以下は除くかな？)の表示が統一されている場合もあります。(＋表示速度もはやい。)
googleほどの技術力や思考力を自分が持っているという自信があるのであれば、validじゃなくてもいいのかもしれませんね。</p>

<h5>視覚的な意味合いしかない物理要素は極力使わず、論理要素でHTMLを構成して、論理構造を明確にすること</h5>


<p>これは端的に言えば、障がい者用のブラウザに対する配慮です。
物理要素で書かれていても、目の見えない人にしてみれば意味がないので、なるべく使うのは控えたいと思ってます。
これに関しては、自分は目が見えるしｗｗｗｗ目見えない奴とかマイノリティだろｗｗｗｗｗとか言う人が多そうですし、実際そういう人を説得するのはめんどいので、その人の良心に任せるしかないと思ってます。</p>

<h2>考え方</h2>


<p>とにかく僕はめんどくさかったり、だるいことが嫌いなんです。
HTMLを使ってデザインするなんてめんどくさすぎて、やってられません。
HTMLはデザインを一切気にせず、サクッと書いて、CSSで各要素にデザイン的な意味合いを付加していく・・・っていうほうが楽だと思うし実際のコード量も減る場合がほとんどです。
コード量が減るということは表示速度がその分はやくなるということです。
まぁ色々とメリットはあると思うんですよ。
こっちはHTMLという言語を使わせてもらっている立場なので滅茶苦茶なコード書くのは失礼な気もしますしね。</p>

<p>言葉足らずなとこがある気がしますが、暑いので終わります。
ミスとかあったら報告してくれると嬉しいです。</p>

<h2>追記</h2>


<p>めんどくさいことが嫌ならプログラミングするなよｗｗｗとか言わないでください。
僕にとっては娯楽であり、目標を達成するための道具なのでめんどくさいことには含まれないんです。
気分で一時的に含まれることはあります。
テキトーでごめんなさい。</p>

<p>あと、HTML勉強会やりたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汎用的なDIV要素についての解釈]]></title>
    <link href="http://namusyaka.github.com/blog/2010/08/01/github-jekyll/"/>
    <updated>2010-08-01T00:00:00+09:00</updated>
    <id>http://namusyaka.github.com/blog/2010/08/01/github-jekyll</id>
    <content type="html"><![CDATA[<p>僕は結構ネットサーフィンをする方なんですが、おっ？と思うレイアウトとかサービスがあると必ずソースを見てしまいます。(主に<abbr title="HyperText Markup Language">HTML</abbr>)
んで、すごい気になるのがDIV要素の数なんですよね。
DIV要素しか使ってないんじゃないの！？ってサイトがかなり多いです。
僕個人としては、Validであれば<abbr title="HyperText Markup Language">HTML</abbr>はかまわないと思うんですが、それはあくまで他人のwebサイトを見るときの僕の中での評価基準であって、自分が書くときは<abbr title="論理的な意味が付加されている要素">論理要素</abbr>※1以外は(極力)使わないようにしています。
<abbr title="視覚的な意味しかない要素">物理要素</abbr>※2(CENTER要素、FONT要素など)は、本来<abbr title="HyperText Markup Language">HTML</abbr>で使わなくていいものだというのが僕の持論だからですね。
それに、デザイン面は全て<abbr title="Cascading Style Sheets">CSS</abbr>で・・・っていうのがW3C的な理想だし、実際に書く人間としてもその方が楽なんじゃないかと。</p>

<h2>で、話はそれましたが</h2>


<p>DIV要素についてです。
DIV要素そのものには論理的な意味合いはないんですが、id属性やclass属性と併用することで論理構造を相手に明示的に知らせることが出来ます。
ですので、一般的な物理要素とはちょっと違うわけですね。
一概に否定は出来ないってことです。</p>

<h2>おまけ：物理要素として認識されているb要素について</h2>


<p>以前に、某H氏とこのような話をしてたときに話題になったんですが、b要素ってのがありますよね？
事実上、<abbr title="Cascading Style Sheets">CSS</abbr>で
<code>font-weight:bold</code>
と書く場合と内容は等価であるとされています。
つまり普通に考えればただの物理要素なんですが、太字にすること自体に意味がある場合もあるみたいです。
例を挙げれば、数学のベクトルです。
僕は数学にまったく興味がないのでよくわからないんですが、どうやらベクトルを示すアルファベットは太字であらわす慣習みたいなものがあるらしいです。
そういう場合はb要素もアリなのかもわかりませんね。</p>

<p>※1 論理的な意味が付加されている要素。
※2 視覚的な意味しかない要素。</p>
]]></content>
  </entry>
  
</feed>
